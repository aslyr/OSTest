
namespace pagetable{
	import console;
	class pageta{
		ctor( num,size ){
			var page = {};
			var ram = {};
			var applylist = "";//这里用table插入会出现问题（无法重复）
			var replacelist = "";//所以这里用字符串保存请求和替换序列
			var pronum = 0;
			var applynumber = 0.0;
			var missnum = 0;
			var menu = '***************内存模拟系统****************\n1.创建进程\n2.进程申请\n3.进程撤销\n4.显示当前状态\n5.退出系统\n';
			for(i=1;num;1){
				ram[i] = null;
			}
			..console.log("内存模拟创建成功！");
			..console.log("内存页面数："++tostring(num)++",页面大小："++tostring(size));
		};
		/*对象的所有成员必须用分号分隔*/
		//显示菜单
		showmenu = function(){
			..console.log(menu);
		}
		//接受用户输入，变为动态运行程序，不过并没有加入验证处理
		accept = function(){
			var input = null;
			while(input != 5){
				this.showmenu();
				input = tonumber(..console.getText( "请输入选项:" ));
				select(input) {
					case 1 {
						var inputname = ..console.getText( "请输入进程名:" );
						var inputnum = tonumber(..console.getText( "请输入进程申请块数:" ));
						this.add(inputname,inputnum);
					}
					case 2 {
						var inputname = ..console.getText( "请输入进程名:" );
						var inputadd = tonumber(..console.getText( "请输入进程逻辑地址:" ));
						this.apply(inputname,inputadd);
					}
					case 3 {
						var inputname = ..console.getText( "请输入进程名:" );
						this.free(inputname);
					}
					case 4 {
						this.print();
					}
					case 5 {
					
					}
					else {
						..console.log("请输入正确选项！");
					}
				}
			}
			
		}
		
		//添加进程
		add = function(name,num){
			var allottab,allotnum = this.allot(num);
			if(allotnum){
				pronum += 1;
				..console.log("进程"++name++"创建成功！所需页面数："++tostring(num)
				++"系统分配块数："++tostring(allotnum));
				var newpro = {name = name;num = num;allotnum = allotnum;
				allottab = allottab;applyorder = {};};
				for(i=1;num;1){
					newpro[i] = null;
				}	
				..table.push(page,newpro);
			}
			else {
				..console.log("系统无空余内存块，分配失败！");
			}		
		}
		//分配内存块
		//若内存已满，则返回{}，0
		//若内存未满，则返回实际块集，实际块数
		allot = function(num){
			var allotnum = ..math.floor(num /2) + 1;
			var allotednum = 0;
			var allottab = {};
			for(i=1;allotnum;1){
				if(!this.isramfull()){//如果内存未满还有空闲
					while(true){
						var ran = ..math.random(1, num);
						//..console.log(ran);
						if(ram[ran] == null){
							//ram[ran] = name ++ tostring(applynum);
							ram[ran] = "null";
							allottab[i] = ran;
							allotednum += 1;
							break ;
						}
					}
				}	
			}
			return allottab,allotednum; 	
		}
		
		//内存请求
		apply = function(name,applynum){
			var oldadd = applynum;
			..console.log("请求逻辑地址为："++name++" : "++oldadd);
			applynum = ..math.floor(applynum/size) + 1;
			for(k,v in page){
				//..console.dump(v);
				if(v.name == name){
					if(v.num*size - 1 < oldadd){
						this.outofrange(name);//发生越界中断
					}
					else {
						if(v[applynum] == null){//页表该项为空
							var pos = this.misspage(name,applynum);//发生缺页中断
							..console.log("块号为：",pos);
							applylist = applylist ++ " "++v.name ++ tostring(applynum);
							v[applynum] = pos;
							..console.log("请求实际物理地址为：",(pos-1)*size + oldadd%size);
						}
						else {
							..console.log("内存请求成功！");
						}
						applynumber += 1;
						..table.push(v.applyorder,applynum);
					}						
				}
			}
			//this.print();	
		}
		
		//越界中断处理程序
		outofrange = function(name){
			..console.log("进程"++name++"越界中断");
		}
		//缺页中断处理子程序
		misspage = function(name,applynum){
			..console.log("内存请求失败！正在调用缺页中断程序...");
			missnum += 1;
			var allotblock = this.isallotfull(name,applynum);
			if(allotblock){
				return allotblock;
			}
			else {
				..console.log("分配内存已满，正在调用替换程序...");
				//return this.allottran(name,applynum);
				return this.allottran(name,applynum);
			}					
		}
		//判断分配块集是否已满？
		//若不满，则返回空闲块号
		//若满，则返回0
		isallotfull = function(name,applynum){
			for(k,v in page){
				if(v.name == name){
					for(i=1;v.allotnum;1){
						if(ram[v.allottab[i]] == null || ram[v.allottab[i]] == "null"){
							ram[v.allottab[i]] = name ++ tostring(applynum);
							return v.allottab[i]; 
						}
					}
					return 0; 
				}
			}
		}
		
		//判断页表是否为满？
		isramfull = function(){
			for(i=1;num;1){
				if(ram[i] == null){
					//..console.log("no full");
					return false;
				}
			
			}
			//..console.log("full");	
			return true;
		}
		//分配替换
		allottran = function(name,applynum){
			for(k,v in page){
				if(v.name == name){
					var index = ..table.remove(v.applyorder);
					//..console.log("index:",index);
					replacelist = replacelist ++ " "++ram[v[index]];
					ram[v[index]] = name ++ tostring(applynum);
					v[index] = null;
					return index; 
				}
			}
		}
		
		//替换程序
		translate = function(name,applynum){
			var ran = ..math.random(1, num);
			//..console.log(ran);
			replacelist = replacelist ++ " "++ram[ran];
			ram[ran] = name ++ tostring(applynum);
			for(k,v in page){
				for(i=1;v.num;1){
					if(v[i] == ran){
						v[i] = null;
						return ran;
					}
				}
			}
		}
		//打印页表
		print = function(){
			//..console.dump(page);
			..console.log("进程请求序列：",applylist);
			..console.log("进程替换序列：",replacelist);
			..console.log("缺页次数："++tostring(missnum));
			..console.log(missnum,applynumber);
			if(applynumber == 0){
				..console.log("分配还没开始哦！");
			}
			else {
				..console.printf("%s%.2f%%","缺页率：",missnum/applynumber*100);
			}
			
			//..console.dumpJson(page);
			for(k,v in page){
				..console.log("进程名："++v.name ++"进程所需页数："++v.num);
			}
			
			for(k,v in page){
				var result = "";
				..console.log("页表"++v.name);
				for(i=1;v.num;1){
					result = result ++ tostring(v[i])++'\t';
				}	
				result = result ++'\n内存分配块号：';
				for(i=1;v.allotnum;1){
					result = result ++ tostring(v.allottab[i])++'\t';
				}
				..console.log(result++'\n');	
			}	
			..console.log("内存存储情况：");
			var result = "";
			if(num < 5){
				for(i=1;num;1){
					result = result ++ tostring(ram[i])++'\t';
				}	
			}
			else {
				for(i=1;num/5;1){
					for(j=1;5;1){
						result = result ++ tostring(ram[j + (i - 1)*5])++'\t';
					}
					result = result ++ '\n';
				}	
			}
			
			..console.log(result);
			..console.log("***********************************************");
		}
		//进程释放
		free = function(name){
			for(i=1;pronum;1){
				if(page[i].name == name){	
					for(j=1;page[i].allotnum;1){
						ram[page[i].allottab[j]] = null;
					}
					
				}	
			}
			..table.remove(page,i);
			pronum -=1;
			..console.log("进程"++name++"释放成功！");
		}
		
		
	}
	/*
var test = pageta(3,1024);
	test.add("A",3);
	test.add("B",5);
	test.apply("A",4*1024);
	//test.print();
	test.apply("A",2*1024-1);
	test.apply("A",3*1024);
	test.apply("A",3*1024-1);
	test.apply("A",2*1024-1);
	test.apply("B",4*1024-1);
	test.apply("B",3*1024-1);
	test.free("A");
	test.apply("B",4*1024-1);
	test.apply("B",1*1024-1);
	test.apply("B",2*1024-1);
	test.apply("B",3*1024-1);
	test.apply("B",5*1024-1);
*/
	..console.log("------------------页式管理程序---------------------");
	//var inputnum = tonumber(..console.getText( "请输入内存块数:" ));
	//var inputsize = tonumber(..console.getText( "请输入内存块大小:" ));
	//var test = pageta(inputnum,inputsize);
	//test.accept();
	var test = pageta(3,1024);
	test.add("A",3);
	test.add("b",2);
	test.apply("A",4*1024);
	test.print();
	test.apply("A",0*1024);
	test.print();
	test.apply("A",0*1024);
	test.print();
	test.apply("A",1*1024);
	test.print();
	test.apply("A",2*1024);
	test.print();
	test.free("A");
	test.print();	
	..console.pause();
}
