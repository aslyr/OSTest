//8、计数信号量同步演示
import console;
import thread.semaphore;
var mutex = thread.semaphore("mutex",1);
var empty = thread.semaphore("empty",20);
var full = thread.semaphore("full",20,0);

var pro = function(){
	var i = 30;
	while(i){
		import console;
		import thread.semaphore;
		var mutex = thread.semaphore("mutex",1);
		var empty = thread.semaphore("empty",20);
		var full = thread.semaphore("full",20,0);	 
		empty.wait();
		//console.log("生产+1");
		mutex.wait();
		console.log("缓冲区数量+1");
		console.log("pro",i);
		mutex.release();
		full.release();
		i--;
	}
/*
	while(true){
		import console;
		import thread.semaphore;
		var mutex = thread.semaphore("mutex",1);
		var empty = thread.semaphore("empty",20);
		var full = thread.semaphore("full",20,0);	 
		console.log("生产者+1");
		empty.wait();
		mutex.wait();
		console.log("缓冲区数量+1");
		mutex.release();
		full.release();
	}
*/
	
	
}
var con = function(){
	var i = 30;
	while(i){
		import console;
		import thread.semaphore;
		var mutex = thread.semaphore("mutex",1);
		var empty = thread.semaphore("empty",20);
		var full = thread.semaphore("full",20,0);	 
		full.wait();
		//console.log("消费+1");
		mutex.wait();
		console.log("缓冲区数量-1");
		console.log("con",i);
		mutex.release();
		empty.release();
		i--;
	}
	/*
while(true){
		import console;
		import thread.semaphore;
		var mutex = thread.semaphore("mutex",1);
		var empty = thread.semaphore("empty",20);
		var full = thread.semaphore("full",20,0);	 
		full.wait();
		mutex.wait();
		console.log("缓冲区数量-1");
		mutex.release();
		empty.release();
		console.log("消费者+1");
	}
*/
	
}



/*
var thrdFunc = function(){
	import console;
	import thread.semaphore;
	var semaphore = thread.semaphore("事件对象名称",2);	 
	
	console.log('我在等待机会') sleep(1)
	semaphore.wait();
	console.log("机会来了,我正在占用资源......")
	sleep(2000)
	semaphore.release()
	
	console.log("已释放资源......") sleep(1)
}
*/

/*
console.log("机会只有两个,但是你们都想要.......")
console.log("---------------")

import thread.manage
manage = thread.manage()

//创建10个线程
for(i=1;10;1){
	manage.create( thrdFunc )
	sleep(100)
}
 
manage.waitClose();
*/

/*
propro = thread.create(pro);
procon = thread.create(con);
var i = 5;
while(!i){
	sleep(10);
}
raw.closehandle(propro);
raw.closehandle(procon)
*/;

thread.invoke(pro);
thread.invoke(con);
console.log("---------------");
console.log("万里长征终于走完了.......");
execute("pause");